openapi: 3.0.0
info:
  title: Posts API
  description: Posts Demo API
  contact:
    name: Alberto Iong
    email: albert0i@hotmail.com
  version: 1.0.0
servers: 
  - url: http://localhost:3000
  - url: http://127.0.0.1:3000

# GET    /posts
# POST   /posts
paths: 
  /api/v1/posts/find/{keywords}:
    get: 
      description: Get posts, full-text search on title and body
      parameters:      
        - in: path
          name: keywords
          required: true
          description: text to be search for on title or body
          schema: 
            type: string 
            example: exercitationem
      responses:
        200: 
          description: Success response
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/posts"

  /api/v1/posts:
    get: 
      description: Get all posts
      parameters:
        - in: query
          name: offset
          required: false
          description: Number of posts to skip 
          schema:
            type: integer
            example: 20 
        - in: query
          name: limit
          required: false
          description: Number of posts to return
          schema:
            type: integer
            example: 5 
        - in: query
          name: id
          required: false
          description: Posts id to start from 
          schema:
            type: integer
            example: 88 
      responses:
        200: 
          description: Success response
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/posts"

    post:
      description: Add a new post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_main" 
      responses:
        201: 
          description: Post successfully added 

# GET    /posts/:id
# PUT    /posts/:id
# DELETE /posts/:id
  /api/v1/posts/{id}:
    get: 
      description: Get a post
      parameters: 
        - $ref: "#/components/parameters/post_id"
      responses:
        200: 
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post"

    put: 
      description: Update a post
      parameters: 
        - $ref: "#/components/parameters/post_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post_main" 
      responses:
        200: 
          description: Post successfully updated

    # patch: 
    #   description: Update a post
    #   parameters: 
    #     - $ref: "#/components/parameters/post_id"
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/post_main" 
    #   responses:
    #     200: 
    #       description: Post successfully updated

    delete: 
      description: Delete a post
      parameters: 
        - $ref: "#/components/parameters/post_id"
      responses:
        200: 
          description: Post successfully deleted

components:
  parameters:
    post_id:
      in: path
      name: id      
      required: true
      description: The ID of the post to interact with
      schema:
        type: integer
        example: 66

  schemas:
    post_id:
      type: object
      properties:
        id:
          type: integer
          example: 66
    post_main:
      type: object
      properties:
        userId:
          type: integer
          example: 11
        title: 
          type: string
          example: Post title
        body:
          type: string
          example: Post body     
    post:
      allOf:
        - $ref: "#/components/schemas/post_id"
        - $ref: "#/components/schemas/post_main"
    posts:
      type: array
      items:
        $ref: "#/components/schemas/post"

#
# Swagger Editor  
# https://editor.swagger.io/
#
# ctrl + space to pop up hints. 
# 